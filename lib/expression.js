// Generated by CoffeeScript 1.10.0
(function() {
  var TABLE, evalAst, evalExpression, evalPath, evalUnaryMinus, getIn, mkEvalOp, parser;

  parser = require("./parser");

  mkEvalOp = function(opFn) {
    return function(ast, scope) {
      var i, len, op, operand, operands, result;
      op = ast[0];
      if (ast.length < 3) {
        throw new Error("Insufficient operands for '" + op + "' operator: " + (JSON.stringify(ast)));
      }
      if (!opFn) {
        throw new Error("Don't know how to evaluate " + op);
      }
      operands = ast.slice(2);
      result = evalAst(ast[1], scope);
      for (i = 0, len = operands.length; i < len; i++) {
        operand = operands[i];
        result = opFn(result, evalAst(operand, scope));
      }
      return result;
    };
  };

  evalUnaryMinus = function(ast, scope) {
    var op, operands;
    op = ast[0];
    if (ast.length !== 2) {
      throw new Error("Wrong number of operands for '" + op + "' operator: " + (JSON.stringify(ast)));
    }
    operands = ast.slice(2);
    return -(evalAst(ast[1], scope));
  };

  getIn = function(obj, path) {
    var result;
    result = obj;
    path.forEach(function(x) {
      var getFirst;
      if (!(result === null || result === void 0)) {
        getFirst = false;
        if (x[x.length - 1] === '~') {
          x = x.substr(0, x.length - 1);
          getFirst = true;
        }
        result = result[x];
        if (getFirst && Array.isArray(result)) {
          return result = result[1];
        }
      }
    });
    return result;
  };

  evalPath = function(ast, scope) {
    var components;
    components = ast.slice(1);
    return getIn(scope, components);
  };

  TABLE = {
    "+": mkEvalOp(function(a, b) {
      return a + b;
    }),
    "-": mkEvalOp(function(a, b) {
      return a - b;
    }),
    "*": mkEvalOp(function(a, b) {
      return a * b;
    }),
    "/": mkEvalOp(function(a, b) {
      return a / b;
    }),
    "=": mkEvalOp(function(a, b) {
      return a === b;
    }),
    "!=": mkEvalOp(function(a, b) {
      return a !== b;
    }),
    ">": mkEvalOp(function(a, b) {
      return a > b;
    }),
    "<": mkEvalOp(function(a, b) {
      return a < b;
    }),
    ">=": mkEvalOp(function(a, b) {
      return a >= b;
    }),
    "<=": mkEvalOp(function(a, b) {
      return a <= b;
    }),
    "unary-": evalUnaryMinus,
    "path": evalPath
  };

  evalExpression = function(expr, scope) {
    var ast;
    ast = parser.parse(expr);
    return evalAst(ast, scope);
  };

  evalAst = function(ast, scope) {
    var evalFn;
    if (Array.isArray(ast)) {
      evalFn = TABLE[ast[0]];
      if (!evalFn) {
        throw new Error("Don't know how to evaluate " + ast[0] + ": " + (JSON.stringify(ast)));
      }
      return evalFn(ast, scope);
    } else {
      return ast;
    }
  };

  module.exports = {
    "eval": evalExpression
  };

}).call(this);
