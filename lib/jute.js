// Autogenerated file, don't change by hand
// Run build.sh from jute.js root to rebuild this file

(function () {
// Generated by CoffeeScript 1.10.0
var extend, firstKeyName, intersectArrays;

extend = function(obj, src) {
  var key;
  for (key in src) {
    if (src.hasOwnProperty(key)) {
      obj[key] = src[key];
    }
  }
  return obj;
};

intersectArrays = function(a, b) {
  var aVal, bVal, i, j, len, len1, result;
  result = [];
  for (i = 0, len = a.length; i < len; i++) {
    aVal = a[i];
    for (j = 0, len1 = b.length; j < len1; j++) {
      bVal = b[j];
      if (aVal === bVal) {
        result.push(aVal);
      }
    }
  }
  return result;
};

firstKeyName = function(object) {
  return Object.keys(object)[0];
};
var parser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleIndices = { Root: 0 },
        peg$startRuleIndex   = 0,

        peg$consts = [
          { type: "any", description: "any character" },
          function(e) { return e; },
          function(expr, filters) {
              var result = expr;
              if (filters != null) {
                for(var i = 0; i < filters.length; i++) {
                  var f = filters[i];
                  result = ["call", f.name, result].concat(f.args);
                }

                return result;
              } else {
                return result;
              }
            },
          "=",
          { type: "literal", value: "=", description: "\"=\"" },
          "!=",
          { type: "literal", value: "!=", description: "\"!=\"" },
          function(left, operator, right) { return [operator, left, right]; },
          "<",
          { type: "literal", value: "<", description: "\"<\"" },
          "<=",
          { type: "literal", value: "<=", description: "\"<=\"" },
          ">",
          { type: "literal", value: ">", description: "\">\"" },
          ">=",
          { type: "literal", value: ">=", description: "\">=\"" },
          "|",
          { type: "literal", value: "|", description: "\"|\"" },
          function(v) { return ["unary-", v]; },
          function(v) { return v; },
          function(l) { return l; },
          function(q) { return q; },
          "@",
          { type: "literal", value: "@", description: "\"@\"" },
          function(c) { return c; },
          function(components) { return ["path"].concat(components); },
          function(head, c) { return c; },
          function(head, components) { return ["path"].concat([head].concat(components)); },
          function() { return text() },
          function(c) { return text(); },
          function(p) { return p; },
          "**",
          { type: "literal", value: "**", description: "\"**\"" },
          function() { return ['deepWildcard']; },
          "*",
          { type: "literal", value: "*", description: "\"*\"" },
          function() { return ['wildcard']; },
          function(e) { return ['expr', e]; },
          function(e) { return ["filter", e]; },
          "|>",
          { type: "literal", value: "|>", description: "\"|>\"" },
          function(filter) { return filter; },
          function(filters) { return filters; },
          function(name, args) {
              return {name: name, args: args || []};
            },
          function(head, e) {return e;},
          function(head, tail) { return [head].concat(tail); },
          "+",
          { type: "literal", value: "+", description: "\"+\"" },
          "-",
          { type: "literal", value: "-", description: "\"-\"" },
          /^[0-9]/,
          { type: "class", value: "[0-9]", description: "[0-9]" },
          function(fract) {
              if (fract) {
                return parseFloat(text());
              } else {
                return parseInt(text());
              }
            },
          function(head, tail) { return ["array", head].concat(tail || {}); },
          "true",
          { type: "literal", value: "true", description: "\"true\"" },
          function() { return true; },
          "false",
          { type: "literal", value: "false", description: "\"false\"" },
          function() { return false; },
          "null",
          { type: "literal", value: "null", description: "\"null\"" },
          function() { return null; },
          "\"",
          { type: "literal", value: "\"", description: "\"\\\"\"" },
          function(chars) {
                return chars.join("");
              },
          "'",
          { type: "literal", value: "'", description: "\"'\"" },
          function() { return text(); },
          "\\",
          { type: "literal", value: "\\", description: "\"\\\\\"" },
          function(sequence) { return sequence; },
          "0",
          { type: "literal", value: "0", description: "\"0\"" },
          function() { return "\0"; },
          "b",
          { type: "literal", value: "b", description: "\"b\"" },
          function() { return "\b";   },
          "f",
          { type: "literal", value: "f", description: "\"f\"" },
          function() { return "\f";   },
          "n",
          { type: "literal", value: "n", description: "\"n\"" },
          function() { return "\n";   },
          "r",
          { type: "literal", value: "r", description: "\"r\"" },
          function() { return "\r";   },
          "t",
          { type: "literal", value: "t", description: "\"t\"" },
          function() { return "\t";   },
          "v",
          { type: "literal", value: "v", description: "\"v\"" },
          function() { return "\x0B"; },
          "x",
          { type: "literal", value: "x", description: "\"x\"" },
          "u",
          { type: "literal", value: "u", description: "\"u\"" },
          function(digits) {
                return String.fromCharCode(parseInt(digits, 16));
              },
          /^[0-9a-f]/i,
          { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
          "/",
          { type: "literal", value: "/", description: "\"/\"" },
          "%",
          { type: "literal", value: "%", description: "\"%\"" },
          ",",
          { type: "literal", value: ",", description: "\",\"" },
          ".",
          { type: "literal", value: ".", description: "\".\"" },
          " ",
          { type: "literal", value: " ", description: "\" \"" },
          "\t",
          { type: "literal", value: "\t", description: "\"\\t\"" },
          /^[a-z]/,
          { type: "class", value: "[a-z]", description: "[a-z]" },
          /^[A-Z]/,
          { type: "class", value: "[A-Z]", description: "[A-Z]" },
          /^[_]/,
          { type: "class", value: "[_]", description: "[_]" },
          "(",
          { type: "literal", value: "(", description: "\"(\"" },
          ")",
          { type: "literal", value: ")", description: "\")\"" },
          "[",
          { type: "literal", value: "[", description: "\"[\"" },
          "]",
          { type: "literal", value: "]", description: "\"]\"" }
        ],

        peg$bytecode = [
          peg$decode("%;!/B#%<1\"\"5!7 =.##&&!&'#/($8\":!\"!!)(\"'#&'#"),
          peg$decode("%;\"/7#;-.\" &\"/)$8\":\"\"\"! )(\"'#&'#"),
          peg$decode("%;#/g#;I/^$%2#\"\"6#7$.) &2%\"\"6%7&/\"!&,)/<$;I/3$;\"/*$8%:'%#$\" )(%'#($'#(#'#(\"'#&'#.# &;#"),
          peg$decode("%;$/#;I/v$%2(\"\"6(7).A &2*\"\"6*7+.5 &2,\"\"6,7-.) &2.\"\"6.7//\"!&,)/<$;I/3$;#/*$8%:'%#$\" )(%'#($'#(#'#(\"'#&'#.# &;$"),
          peg$decode("%;%/[#;I/R$%;B.# &;C/\"!&,)/<$;I/3$;$/*$8%:'%#$\" )(%'#($'#(#'#(\"'#&'#.# &;%"),
          peg$decode("%;&/a#;I/X$%;D.) &;E.# &;F/\"!&,)/<$;I/3$;%/*$8%:'%#$\" )(%'#($'#(#'#(\"'#&'#.# &;&"),
          peg$decode("%;'/[#;I/R$%20\"\"6071/\"!&,)/<$;I/3$;&/*$8%:'%#$\" )(%'#($'#(#'#(\"'#&'#.# &;'"),
          peg$decode("%;C/1#;(/($8\":2\"! )(\"'#&'#./ &%;(/' 8!:3!! )"),
          peg$decode("%;1/' 8!:4!! ).V &%;)/' 8!:5!! ).D &%;L/:#;!/1$;M/($8#:!#!!)(#'#(\"'#&'#"),
          peg$decode("%26\"\"6677/h#$%;H/1#;+/($8\":8\"! )(\"'#&'#0;*%;H/1#;+/($8\":8\"! )(\"'#&'#&/($8\":9\"! )(\"'#&'#.u &%;*/k#$%;H/2#;+/)$8\"::\"\"$ )(\"'#&'#0<*%;H/2#;+/)$8\"::\"\"$ )(\"'#&'#&/)$8\":;\"\"! )(\"'#&'#"),
          peg$decode("%;J/7#$;K0#*;K&/'$8\":<\" )(\"'#&'#"),
          peg$decode("%$;K/&#0#*;K&&&#/' 8!:=!! ).\x84 &%;,/' 8!:>!! ).r &%2?\"\"6?7@/& 8!:A! ).[ &%2B\"\"6B7C/& 8!:D! ).D &%;L/:#;!/1$;M/($8#:E#!!)(#'#(\"'#&'#"),
          peg$decode("%2B\"\"6B7C/C#;L/:$;!/1$;M/($8$:F$!!)($'#(#'#(\"'#&'#"),
          peg$decode("%$%;I/I#2G\"\"6G7H/:$;I/1$;./($8$:I$! )($'#(#'#(\"'#&'#/V#0S*%;I/I#2G\"\"6G7H/:$;I/1$;./($8$:I$! )($'#(#'#(\"'#&'#&&&#/' 8!:J!! )"),
          peg$decode("%%;//\"!&,)/7#;0.\" &\"/)$8\":K\"\"! )(\"'#&'#"),
          peg$decode("$;K/&#0#*;K&&&#"),
          peg$decode("%;L/\xB3#;I/\xAA$;!/\xA1$$%;I/D#;G/;$;I/2$;!/)$8$:L$\"& )($'#(#'#(\"'#&'#0N*%;I/D#;G/;$;I/2$;!/)$8$:L$\"& )($'#(#'#(\"'#&'#&/;$;I/2$;M/)$8&:M&\"#\")(&'#(%'#($'#(#'#(\"'#&'#"),
          peg$decode(";2.5 &;3./ &;6.) &;4.# &;5"),
          peg$decode("%2N\"\"6N7O.) &2P\"\"6P7Q.\" &\"/\x84#$4R\"\"5!7S/,#0)*4R\"\"5!7S&&&#/b$%;H/E#$4R\"\"5!7S/,#0)*4R\"\"5!7S&&&#/#$+\")(\"'#&'#.\" &\"/($8#:T#! )(#'#(\"'#&'#"),
          peg$decode("%;N/\xA1#;!/\x98$$%;I/D#;G/;$;I/2$;!/)$8$:L$\"& )($'#(#'#(\"'#&'#0N*%;I/D#;G/;$;I/2$;!/)$8$:L$\"& )($'#(#'#(\"'#&'#&/2$;O/)$8$:U$\"\"!)($'#(#'#(\"'#&'#"),
          peg$decode("%2V\"\"6V7W/<#%<;K=.##&&!&'#/'$8\":X\" )(\"'#&'#.L &%2Y\"\"6Y7Z/<#%<;K=.##&&!&'#/'$8\":[\" )(\"'#&'#"),
          peg$decode("%2\\\"\"6\\7]/<#%<;K=.##&&!&'#/'$8\":^\" )(\"'#&'#"),
          peg$decode("%2_\"\"6_7`/G#$;70#*;7&/7$2_\"\"6_7`/($8#:a#!!)(#'#(\"'#&'#.W &%2b\"\"6b7c/G#$;80#*;8&/7$2b\"\"6b7c/($8#:a#!!)(#'#(\"'#&'#"),
          peg$decode("%%<2_\"\"6_7`=.##&&!&'#/5#1\"\"5!7 /'$8\":d\" )(\"'#&'#.A &%2e\"\"6e7f/1#;9/($8\":g\"! )(\"'#&'#"),
          peg$decode("%%<2b\"\"6b7c=.##&&!&'#/5#1\"\"5!7 /'$8\":d\" )(\"'#&'#.A &%2e\"\"6e7f/1#;9/($8\":g\"! )(\"'#&'#"),
          peg$decode(";:.^ &%2h\"\"6h7i/B#%<4R\"\"5!7S=.##&&!&'#/'$8\":j\" )(\"'#&'#.) &;>.# &;@"),
          peg$decode(";;.# &;<"),
          peg$decode("2b\"\"6b7c.\xBF &2_\"\"6_7`.\xB3 &2e\"\"6e7f.\xA7 &%2k\"\"6k7l/& 8!:m! ).\x90 &%2n\"\"6n7o/& 8!:p! ).y &%2q\"\"6q7r/& 8!:s! ).b &%2t\"\"6t7u/& 8!:v! ).K &%2w\"\"6w7x/& 8!:y! ).4 &%2z\"\"6z7{/& 8!:|! )"),
          peg$decode("%%<;==.##&&!&'#/5#1\"\"5!7 /'$8\":d\" )(\"'#&'#"),
          peg$decode(";;.A &4R\"\"5!7S.5 &2}\"\"6}7~.) &2\"\"67\x80"),
          peg$decode("%2}\"\"6}7~/K#%%;?/,#;?/#$+\")(\"'#&'#/\"!&,)/($8\":\x81\"! )(\"'#&'#"),
          peg$decode("4\x82\"\"5!7\x83"),
          peg$decode("%2\"\"67\x80/]#%%;?/>#;?/5$;?/,$;?/#$+$)($'#(#'#(\"'#&'#/\"!&,)/($8\":\x81\"! )(\"'#&'#"),
          peg$decode("20\"\"6071"),
          peg$decode("2N\"\"6N7O"),
          peg$decode("2P\"\"6P7Q"),
          peg$decode("2B\"\"6B7C"),
          peg$decode("2\x84\"\"6\x847\x85"),
          peg$decode("2\x86\"\"6\x867\x87"),
          peg$decode("2\x88\"\"6\x887\x89"),
          peg$decode("2\x8A\"\"6\x8A7\x8B"),
          peg$decode("$2\x8C\"\"6\x8C7\x8D.) &2\x8E\"\"6\x8E7\x8F05*2\x8C\"\"6\x8C7\x8D.) &2\x8E\"\"6\x8E7\x8F&"),
          peg$decode("4\x90\"\"5!7\x91.5 &4\x92\"\"5!7\x93.) &4\x94\"\"5!7\x95"),
          peg$decode("4\x90\"\"5!7\x91.A &4\x92\"\"5!7\x93.5 &4R\"\"5!7S.) &4\x94\"\"5!7\x95"),
          peg$decode("2\x96\"\"6\x967\x97"),
          peg$decode("2\x98\"\"6\x987\x99"),
          peg$decode("2\x9A\"\"6\x9A7\x9B"),
          peg$decode("2\x9C\"\"6\x9C7\x9D")
        ],

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleIndices)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleIndex = peg$startRuleIndices[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$decode(s) {
      var bc = new Array(s.length), i;

      for (i = 0; i < s.length; i++) {
        bc[i] = s.charCodeAt(i) - 32;
      }

      return bc;
    }

    function peg$parseRule(index) {
      var bc    = peg$bytecode[index],
          ip    = 0,
          ips   = [],
          end   = bc.length,
          ends  = [],
          stack = [],
          params, i;

      while (true) {
        while (ip < end) {
          switch (bc[ip]) {
            case 0:
              stack.push(peg$consts[bc[ip + 1]]);
              ip += 2;
              break;

            case 1:
              stack.push(void 0);
              ip++;
              break;

            case 2:
              stack.push(null);
              ip++;
              break;

            case 3:
              stack.push(peg$FAILED);
              ip++;
              break;

            case 4:
              stack.push([]);
              ip++;
              break;

            case 5:
              stack.push(peg$currPos);
              ip++;
              break;

            case 6:
              stack.pop();
              ip++;
              break;

            case 7:
              peg$currPos = stack.pop();
              ip++;
              break;

            case 8:
              stack.length -= bc[ip + 1];
              ip += 2;
              break;

            case 9:
              stack.splice(-2, 1);
              ip++;
              break;

            case 10:
              stack[stack.length - 2].push(stack.pop());
              ip++;
              break;

            case 11:
              stack.push(stack.splice(stack.length - bc[ip + 1], bc[ip + 1]));
              ip += 2;
              break;

            case 12:
              stack.push(input.substring(stack.pop(), peg$currPos));
              ip++;
              break;

            case 13:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1]) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 14:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] === peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 15:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (stack[stack.length - 1] !== peg$FAILED) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 16:
              if (stack[stack.length - 1] !== peg$FAILED) {
                ends.push(end);
                ips.push(ip);

                end = ip + 2 + bc[ip + 1];
                ip += 2;
              } else {
                ip += 2 + bc[ip + 1];
              }

              break;

            case 17:
              ends.push(end);
              ips.push(ip + 3 + bc[ip + 1] + bc[ip + 2]);

              if (input.length > peg$currPos) {
                end = ip + 3 + bc[ip + 1];
                ip += 3;
              } else {
                end = ip + 3 + bc[ip + 1] + bc[ip + 2];
                ip += 3 + bc[ip + 1];
              }

              break;

            case 18:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length) === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 19:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (input.substr(peg$currPos, peg$consts[bc[ip + 1]].length).toLowerCase() === peg$consts[bc[ip + 1]]) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 20:
              ends.push(end);
              ips.push(ip + 4 + bc[ip + 2] + bc[ip + 3]);

              if (peg$consts[bc[ip + 1]].test(input.charAt(peg$currPos))) {
                end = ip + 4 + bc[ip + 2];
                ip += 4;
              } else {
                end = ip + 4 + bc[ip + 2] + bc[ip + 3];
                ip += 4 + bc[ip + 2];
              }

              break;

            case 21:
              stack.push(input.substr(peg$currPos, bc[ip + 1]));
              peg$currPos += bc[ip + 1];
              ip += 2;
              break;

            case 22:
              stack.push(peg$consts[bc[ip + 1]]);
              peg$currPos += peg$consts[bc[ip + 1]].length;
              ip += 2;
              break;

            case 23:
              stack.push(peg$FAILED);
              if (peg$silentFails === 0) {
                peg$fail(peg$consts[bc[ip + 1]]);
              }
              ip += 2;
              break;

            case 24:
              peg$savedPos = stack[stack.length - 1 - bc[ip + 1]];
              ip += 2;
              break;

            case 25:
              peg$savedPos = peg$currPos;
              ip++;
              break;

            case 26:
              params = bc.slice(ip + 4, ip + 4 + bc[ip + 3]);
              for (i = 0; i < bc[ip + 3]; i++) {
                params[i] = stack[stack.length - 1 - params[i]];
              }

              stack.splice(
                stack.length - bc[ip + 2],
                bc[ip + 2],
                peg$consts[bc[ip + 1]].apply(null, params)
              );

              ip += 4 + bc[ip + 3];
              break;

            case 27:
              stack.push(peg$parseRule(bc[ip + 1]));
              ip += 2;
              break;

            case 28:
              peg$silentFails++;
              ip++;
              break;

            case 29:
              peg$silentFails--;
              ip++;
              break;

            default:
              throw new Error("Invalid opcode: " + bc[ip] + ".");
          }
        }

        if (ends.length > 0) {
          end = ends.pop();
          ip = ips.pop();
        } else {
          break;
        }
      }

      return stack[0];
    }

    peg$result = peg$parseRule(peg$startRuleIndex);

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
// Generated by CoffeeScript 1.10.0
var EVAL_TABLE, evalAst, evalExpression, evalPath, evalUnaryMinus, flatten, flattenRecur, isWildcard, mapAndFilterNulls, mkEvalOp, resolvePath;

mkEvalOp = function(opFn) {
  return function(ast, scope) {
    var j, len, op, operand, operands, result;
    op = ast[0];
    if (ast.length < 3) {
      throw new Error("Insufficient operands for '" + op + "' operator: " + (JSON.stringify(ast)));
    }
    if (!opFn) {
      throw new Error("Don't know how to evaluate " + op);
    }
    operands = ast.slice(2);
    result = evalAst(ast[1], scope);
    for (j = 0, len = operands.length; j < len; j++) {
      operand = operands[j];
      result = opFn(result, evalAst(operand, scope));
    }
    return result;
  };
};

evalUnaryMinus = function(ast, scope) {
  var op, operands;
  op = ast[0];
  if (ast.length !== 2) {
    throw new Error("Wrong number of operands for '" + op + "' operator: " + (JSON.stringify(ast)));
  }
  operands = ast.slice(2);
  return -(evalAst(ast[1], scope));
};

flattenRecur = function(arr) {
  return arr.reduce(function(acc, i) {
    return acc.concat(Array.isArray(i) ? flatten(i) : i);
  }, []);
};

flatten = function(arr) {
  return arr.reduce((function(acc, i) {
    return acc.concat(i);
  }), []);
};

isWildcard = function(c) {
  return Array.isArray(c) && c.length === 1 && c[0] === 'wildcard';
};

mapAndFilterNulls = function(array, mapFn) {
  return array.map(mapFn).filter(function(i) {
    return i !== null && i !== void 0;
  });
};

resolvePath = function(scope, path) {
  var pathHead, pathTail;
  pathHead = path[0];
  pathTail = path.slice(1);
  if (pathHead === null || pathHead === void 0) {
    return scope;
  }
  if (!(scope === null || scope === void 0)) {
    if (isWildcard(pathHead)) {
      if (Array.isArray(scope)) {
        return mapAndFilterNulls(scope, function(item) {
          return resolvePath(item, pathTail);
        });
      } else if (typeof scope === "object") {
        return mapAndFilterNulls(Object.keys(scope), function(k) {
          return resolvePath(scope[k], pathTail);
        });
      } else {
        return resolvePath(scope, pathTail);
      }
    } else {
      if (Array.isArray(scope) && !(pathHead.match(/^\d+$/))) {
        return [];
      } else {
        return resolvePath(scope[pathHead], pathTail);
      }
    }
  }
};

evalPath = function(ast, scope) {
  var components;
  components = ast.slice(1);
  return resolvePath(scope, components);
};

EVAL_TABLE = {
  "+": mkEvalOp(function(a, b) {
    return a + b;
  }),
  "-": mkEvalOp(function(a, b) {
    return a - b;
  }),
  "*": mkEvalOp(function(a, b) {
    return a * b;
  }),
  "/": mkEvalOp(function(a, b) {
    return a / b;
  }),
  "=": mkEvalOp(function(a, b) {
    return a === b;
  }),
  "!=": mkEvalOp(function(a, b) {
    return a !== b;
  }),
  ">": mkEvalOp(function(a, b) {
    return a > b;
  }),
  "<": mkEvalOp(function(a, b) {
    return a < b;
  }),
  ">=": mkEvalOp(function(a, b) {
    return a >= b;
  }),
  "<=": mkEvalOp(function(a, b) {
    return a <= b;
  }),
  "unary-": evalUnaryMinus,
  "path": evalPath
};

evalExpression = function(expr, scope) {
  var ast;
  ast = parser.parse(expr);
  return evalAst(ast, scope);
};

evalAst = function(ast, scope) {
  var evalFn;
  if (Array.isArray(ast)) {
    evalFn = EVAL_TABLE[ast[0]];
    if (!evalFn) {
      throw new Error("Don't know how to evaluate " + ast[0] + ": " + (JSON.stringify(ast)));
    }
    return evalFn(ast, scope);
  } else {
    return ast;
  }
};
// Generated by CoffeeScript 1.10.0
var DEFAULT_DIRECTIVES, evalFilter, evalIf, evalJs, evalLet, evalMap, evalSwitch;

evalLet = function(jute, node, scope, options) {
  var addVarToScope, body, childScope, i, k, len, ref, ref1, v, varDecl, varName;
  childScope = jute.makeChildScope(scope);
  addVarToScope = function(name, node) {
    return childScope[name] = jute.evalNode(node, childScope, options);
  };
  if (Array.isArray(node.$let)) {
    ref = node.$let;
    for (i = 0, len = ref.length; i < len; i++) {
      varDecl = ref[i];
      varName = firstKeyName(varDecl);
      if (varName) {
        addVarToScope(varName, varDecl[varName]);
      }
    }
  } else {
    ref1 = node.$let;
    for (k in ref1) {
      v = ref1[k];
      addVarToScope(k, v);
    }
  }
  body = node.$body;
  if (typeof body === 'undefined') {
    throw "No $body attr in $let node: " + JSON.stringify(node);
  }
  return jute.evalNode(body, childScope, options);
};

evalIf = function(jute, node, scope, options) {
  var evalResult, v;
  evalResult = jute.evalExpression(node.$if, scope, options);
  if (evalResult) {
    v = nodeValue(node, '$then');
    return jute.evalNode(v, scope, options);
  } else {
    return jute.evalNode(node.$else || null, scope, options);
  }
};

evalSwitch = function(jute, node, scope, options) {
  var evalResult, resultNode;
  evalResult = jute.evalExpression(node.$switch, scope, options);
  resultNode = node[evalResult];
  if (typeof resultNode === 'undefined') {
    resultNode = node['$default'];
  }
  if (typeof resultNode === 'undefined') {
    return null;
  } else {
    return jute.evalNode(resultNode, scope, options);
  }
};

evalFilter = function(jute, node, scope, options) {
  var applyFilter, f, filters, i, len, result, val;
  filters = node.$filter;
  val = jute.evalNode(nodeValue(node, '$body'), scope, options);
  applyFilter = function(filterName, val) {
    var filterArgs, filterFn;
    if (filterName.indexOf('(') > 0) {
      filterArgs = filterName.match(/\(([^)]+)\)$/)[1].split(",").map(JSON.parse);
      filterName = filterName.substr(0, filterName.indexOf("("));
    } else {
      filterArgs = [];
    }
    filterFn = HELPERS[filterName];
    if (!filterFn) {
      throw "Unknown filter: '" + filterName + "'";
    }
    return filterFn.apply(scope, [val].concat(filterArgs));
  };
  if (Array.isArray(filters)) {
    result = val;
    for (i = 0, len = filters.length; i < len; i++) {
      f = filters[i];
      result = applyFilter(f, result);
    }
    return result;
  } else {
    return applyFilter(filters, val);
  }
};

evalJs = function(jute, node, scope, options) {
  return eval(node.$js);
};

evalMap = function(jute, node, scope, options) {
  var array, childScope, result, value, varName;
  array = jute.evalExpression(node.$map, scope, options);
  varName = node.$as;
  value = nodeValue(node, '$body', options);
  result = [];
  childScope = jute.makeChildScope(scope);
  array.forEach(function(item) {
    childScope[varName] = item;
    return result.push(jute.evalNode(value, childScope, options));
  });
  return result;
};

DEFAULT_DIRECTIVES = {
  $if: evalIf,
  $switch: evalSwitch,
  $let: evalLet,
  $filter: evalFilter,
  $map: evalMap,
  $js: evalJs
};
// Generated by CoffeeScript 1.10.0
var HELPERS, evalDirective, evalNode, evalObject, evalString, exports, isDirective, jute, makeChildScope, nodeValue, transform;

HELPERS = {
  join: function(s, sep) {
    return s.join(sep);
  },
  toUpperCase: function(s) {
    return String(s).toUpperCase();
  },
  toLowerCase: function(s) {
    return String(s).toLowerCase();
  }
};

makeChildScope = function(scope) {
  var childScope;
  childScope = {};
  childScope.__proto__ = scope;
  return childScope;
};

nodeValue = function(node, valueAttr) {
  var key, value, valueObject;
  valueObject = node[valueAttr || '$value'];
  if (typeof valueObject !== 'undefined') {
    return valueObject;
  } else {
    valueObject = {};
    for (key in node) {
      value = node[key];
      if (!key.match(/^\$/)) {
        valueObject[key] = value;
      }
    }
    return valueObject;
  }
};

isDirective = function(node, options) {
  var key, value;
  for (key in node) {
    value = node[key];
    if (key.match(/^\$/)) {
      return true;
    }
  }
  return false;
};

evalDirective = function(node, scope, options) {
  var directiveFn, directiveName, keys, knownDirectives, nodeKeys;
  knownDirectives = Object.keys(options.directives);
  nodeKeys = Object.keys(node);
  keys = intersectArrays(nodeKeys, knownDirectives);
  if (keys.length === 0) {
    throw "Could not find known directive among " + (nodeKeys.join(', ')) + "; Known directives are: " + (knownDirectives.join(', '));
  } else if (keys.length > 1) {
    throw "Ambigous node with multiple directives found: " + (keys.join(', '));
  }
  directiveName = keys[0];
  directiveFn = options.directives[directiveName];
  return directiveFn(jute, node, scope, options);
};

evalObject = function(node, scope, options) {
  var key, result, value;
  if (isDirective(node, options)) {
    return evalDirective(node, scope, options);
  } else {
    result = {};
    for (key in node) {
      value = node[key];
      result[key] = jute.evalNode(value, scope, options);
    }
    return result;
  }
};

evalString = function(node, scope, options) {
  var expressionStartRegexp;
  expressionStartRegexp = /^\s*\$\s+/;
  if (node.match(expressionStartRegexp)) {
    return jute.evalExpression(node.replace(expressionStartRegexp, ''), scope);
  } else {
    return node;
  }
};

evalNode = function(node, scope, options) {
  var nodeType;
  if (typeof options === 'undefined' || !options) {
    throw "evalNode() called without options. Node is: " + (JSON.stringify(node));
  }
  if (typeof scope === 'undefined') {
    throw "evalNode() called with undefined scope. Node is: " + (JSON.stringify(node));
  }
  nodeType = typeof node;
  if (nodeType === 'object' && node !== null) {
    if (Array.isArray(node)) {
      return node.map(function(element) {
        return jute.evalNode(element, scope, options);
      });
    } else {
      return evalObject(node, scope, options);
    }
  } else {
    if (nodeType === 'string') {
      return evalString(node, scope, options);
    } else if (nodeType === 'undefined') {
      return null;
    } else {
      return node;
    }
  }
};

jute = {
  evalExpression: evalExpression,
  evalNode: evalNode,
  makeChildScope: makeChildScope
};

transform = function(scope, template, options) {
  if (options == null) {
    options = {
      directives: {}
    };
  }
  extend(options.directives, DEFAULT_DIRECTIVES);
  return jute.evalNode(template, scope, options);
};

exports = {
  transform: transform,
  parser: parser,
  jute: jute
};

if (typeof module !== 'undefined') {
  module.exports = exports;
} else if (typeof window !== 'undefined') {
  window.jute = exports;
} else {
  this.jute = exports;
}
}).call(this);
