// Autogenerated file, don't change by hand
// Run build.sh from jute.js root to rebuild this file

(function () {
// Generated by CoffeeScript 1.10.0
var extend, firstKeyName, intersectArrays;

extend = function(obj, src) {
  var key;
  for (key in src) {
    if (src.hasOwnProperty(key)) {
      obj[key] = src[key];
    }
  }
  return obj;
};

intersectArrays = function(a, b) {
  var aVal, bVal, i, j, len, len1, result;
  result = [];
  for (i = 0, len = a.length; i < len; i++) {
    aVal = a[i];
    for (j = 0, len1 = b.length; j < len1; j++) {
      bVal = b[j];
      if (aVal === bVal) {
        result.push(aVal);
      }
    }
  }
  return result;
};

firstKeyName = function(object) {
  return Object.keys(object)[0];
};
var parser = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { Root: peg$parseRoot },
        peg$startRuleFunction  = peg$parseRoot,

        peg$c0 = { type: "any", description: "any character" },
        peg$c1 = function(e) { return e; },
        peg$c2 = function(expr, filters) {
            var result = expr;
            if (filters != null) {
              for(var i = 0; i < filters.length; i++) {
                var f = filters[i];
                result = ["call", f.name, result].concat(f.args);
              }

              return result;
            } else {
              return result;
            }
          },
        peg$c3 = "=",
        peg$c4 = { type: "literal", value: "=", description: "\"=\"" },
        peg$c5 = "!=",
        peg$c6 = { type: "literal", value: "!=", description: "\"!=\"" },
        peg$c7 = function(left, operator, right) { return [operator, left, right]; },
        peg$c8 = "<",
        peg$c9 = { type: "literal", value: "<", description: "\"<\"" },
        peg$c10 = "<=",
        peg$c11 = { type: "literal", value: "<=", description: "\"<=\"" },
        peg$c12 = ">",
        peg$c13 = { type: "literal", value: ">", description: "\">\"" },
        peg$c14 = ">=",
        peg$c15 = { type: "literal", value: ">=", description: "\">=\"" },
        peg$c16 = "|",
        peg$c17 = { type: "literal", value: "|", description: "\"|\"" },
        peg$c18 = function(v) { return ["unary-", v]; },
        peg$c19 = function(v) { return v; },
        peg$c20 = function(l) { return l; },
        peg$c21 = function(q) { return q; },
        peg$c22 = "@",
        peg$c23 = { type: "literal", value: "@", description: "\"@\"" },
        peg$c24 = function(c) { return c; },
        peg$c25 = function(components) { return ["path"].concat(components); },
        peg$c26 = function(head, c) { return c; },
        peg$c27 = function(head, components) { return ["path"].concat([head].concat(components)); },
        peg$c28 = function(expr, c) { return c; },
        peg$c29 = function(expr, components) { return ["path"].concat([expr].concat(components)); },
        peg$c30 = function() { return text() },
        peg$c31 = /^[0-9]/,
        peg$c32 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c33 = function() { return parseInt(text()); },
        peg$c34 = function() { return text(); },
        peg$c35 = function(p) { return p; },
        peg$c36 = "**",
        peg$c37 = { type: "literal", value: "**", description: "\"**\"" },
        peg$c38 = function() { return ['deepWildcard']; },
        peg$c39 = "*",
        peg$c40 = { type: "literal", value: "*", description: "\"*\"" },
        peg$c41 = function() { return ['wildcard']; },
        peg$c42 = function(expr) { return expr; },
        peg$c43 = function(e) { return ['expr', e]; },
        peg$c44 = function(e) { return ["pred", e]; },
        peg$c45 = "|>",
        peg$c46 = { type: "literal", value: "|>", description: "\"|>\"" },
        peg$c47 = function(filter) { return filter; },
        peg$c48 = function(filters) { return filters; },
        peg$c49 = function(name, args) {
            return {name: name, args: args || []};
          },
        peg$c50 = function(head, e) {return e;},
        peg$c51 = function(head, tail) { return [head].concat(tail); },
        peg$c52 = "+",
        peg$c53 = { type: "literal", value: "+", description: "\"+\"" },
        peg$c54 = "-",
        peg$c55 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c56 = function(fract) {
            if (fract) {
              return parseFloat(text());
            } else {
              return parseInt(text());
            }
          },
        peg$c57 = function(head, tail) { return ["array", head].concat(tail || {}); },
        peg$c58 = "true",
        peg$c59 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c60 = function() { return true; },
        peg$c61 = "false",
        peg$c62 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c63 = function() { return false; },
        peg$c64 = "null",
        peg$c65 = { type: "literal", value: "null", description: "\"null\"" },
        peg$c66 = function() { return null; },
        peg$c67 = "\"",
        peg$c68 = { type: "literal", value: "\"", description: "\"\\\"\"" },
        peg$c69 = function(chars) {
              return chars.join("");
            },
        peg$c70 = "'",
        peg$c71 = { type: "literal", value: "'", description: "\"'\"" },
        peg$c72 = "\\",
        peg$c73 = { type: "literal", value: "\\", description: "\"\\\\\"" },
        peg$c74 = function(sequence) { return sequence; },
        peg$c75 = "0",
        peg$c76 = { type: "literal", value: "0", description: "\"0\"" },
        peg$c77 = function() { return "\0"; },
        peg$c78 = "b",
        peg$c79 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c80 = function() { return "\b";   },
        peg$c81 = "f",
        peg$c82 = { type: "literal", value: "f", description: "\"f\"" },
        peg$c83 = function() { return "\f";   },
        peg$c84 = "n",
        peg$c85 = { type: "literal", value: "n", description: "\"n\"" },
        peg$c86 = function() { return "\n";   },
        peg$c87 = "r",
        peg$c88 = { type: "literal", value: "r", description: "\"r\"" },
        peg$c89 = function() { return "\r";   },
        peg$c90 = "t",
        peg$c91 = { type: "literal", value: "t", description: "\"t\"" },
        peg$c92 = function() { return "\t";   },
        peg$c93 = "v",
        peg$c94 = { type: "literal", value: "v", description: "\"v\"" },
        peg$c95 = function() { return "\x0B"; },
        peg$c96 = "x",
        peg$c97 = { type: "literal", value: "x", description: "\"x\"" },
        peg$c98 = "u",
        peg$c99 = { type: "literal", value: "u", description: "\"u\"" },
        peg$c100 = function(digits) {
              return String.fromCharCode(parseInt(digits, 16));
            },
        peg$c101 = /^[0-9a-f]/i,
        peg$c102 = { type: "class", value: "[0-9a-f]i", description: "[0-9a-f]i" },
        peg$c103 = "/",
        peg$c104 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c105 = "%",
        peg$c106 = { type: "literal", value: "%", description: "\"%\"" },
        peg$c107 = ",",
        peg$c108 = { type: "literal", value: ",", description: "\",\"" },
        peg$c109 = ".",
        peg$c110 = { type: "literal", value: ".", description: "\".\"" },
        peg$c111 = " ",
        peg$c112 = { type: "literal", value: " ", description: "\" \"" },
        peg$c113 = "\t",
        peg$c114 = { type: "literal", value: "\t", description: "\"\\t\"" },
        peg$c115 = /^[a-z]/,
        peg$c116 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c117 = /^[A-Z]/,
        peg$c118 = { type: "class", value: "[A-Z]", description: "[A-Z]" },
        peg$c119 = /^[_]/,
        peg$c120 = { type: "class", value: "[_]", description: "[_]" },
        peg$c121 = "(",
        peg$c122 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c123 = ")",
        peg$c124 = { type: "literal", value: ")", description: "\")\"" },
        peg$c125 = "[",
        peg$c126 = { type: "literal", value: "[", description: "\"[\"" },
        peg$c127 = "]",
        peg$c128 = { type: "literal", value: "]", description: "\"]\"" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parseRoot() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c1(s1);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseExpr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseEqualityExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFilters();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c2(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEqualityExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseComparisonExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSPACE();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 61) {
            s4 = peg$c3;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c4); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c5) {
              s4 = peg$c5;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c6); }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSPACE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseEqualityExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseComparisonExpr();
      }

      return s0;
    }

    function peg$parseComparisonExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseAdditiveExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSPACE();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 60) {
            s4 = peg$c8;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c9); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c10) {
              s4 = peg$c10;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c11); }
            }
            if (s4 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 62) {
                s4 = peg$c12;
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c13); }
              }
              if (s4 === peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c14) {
                  s4 = peg$c14;
                  peg$currPos += 2;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c15); }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSPACE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseComparisonExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseAdditiveExpr();
      }

      return s0;
    }

    function peg$parseAdditiveExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseMultiplicativeExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSPACE();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsePLUS();
          if (s4 === peg$FAILED) {
            s4 = peg$parseMINUS();
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSPACE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseAdditiveExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseMultiplicativeExpr();
      }

      return s0;
    }

    function peg$parseMultiplicativeExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseSetExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSPACE();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseMUL();
          if (s4 === peg$FAILED) {
            s4 = peg$parseDIV();
            if (s4 === peg$FAILED) {
              s4 = peg$parseMOD();
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSPACE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseMultiplicativeExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseSetExpr();
      }

      return s0;
    }

    function peg$parseSetExpr() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseNegationExpr();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSPACE();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 124) {
            s4 = peg$c16;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c17); }
          }
          if (s4 !== peg$FAILED) {
            s3 = input.substring(s3, peg$currPos);
          } else {
            s3 = s4;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseSPACE();
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSetExpr();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c7(s1, s3, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseNegationExpr();
      }

      return s0;
    }

    function peg$parseNegationExpr() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseMINUS();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseValue();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c18(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parseValue();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c19(s1);
        }
        s0 = s1;
      }

      return s0;
    }

    function peg$parseValue() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLiteral();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c20(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePath();
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c21(s1);
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parseLPAR();
          if (s1 !== peg$FAILED) {
            s2 = peg$parseExpr();
            if (s2 !== peg$FAILED) {
              s3 = peg$parseRPAR();
              if (s3 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c1(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsePath() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 64) {
        s1 = peg$c22;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c23); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parseDOT();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsePathComponent();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s4 = peg$c24(s5);
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$currPos;
          s4 = peg$parseDOT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePathComponent();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c24(s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c25(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsePathHead();
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$currPos;
          s4 = peg$parseDOT();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsePathComponent();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s3;
              s4 = peg$c26(s1, s5);
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parseDOT();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsePathComponent();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c26(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c27(s1, s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePathExpr();
          if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$currPos;
            s4 = peg$parseDOT();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsePathComponent();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s3;
                s4 = peg$c28(s1, s5);
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$currPos;
                s4 = peg$parseDOT();
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsePathComponent();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s3;
                    s4 = peg$c28(s1, s5);
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c29(s1, s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }

      return s0;
    }

    function peg$parsePathHead() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseNON_DIGIT_CHAR();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseID_CHAR();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseID_CHAR();
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c30();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePathComponent() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c31.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c32); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c31.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c33();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = [];
        s2 = peg$parseID_CHAR();
        if (s2 !== peg$FAILED) {
          while (s2 !== peg$FAILED) {
            s1.push(s2);
            s2 = peg$parseID_CHAR();
          }
        } else {
          s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsePathPredicate();
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s1);
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.substr(peg$currPos, 2) === peg$c36) {
              s1 = peg$c36;
              peg$currPos += 2;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c37); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c38();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 42) {
                s1 = peg$c39;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c40); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c41();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                s1 = peg$parsePathExpr();
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c42(s1);
                }
                s0 = s1;
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parsePathExpr() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseLPAR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpr();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseRPAR();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c43(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePathPredicate() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 42) {
        s1 = peg$c39;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseLPAR();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpr();
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRPAR();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c44(s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFilters() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = [];
      s2 = peg$currPos;
      s3 = peg$parseSPACE();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c45) {
          s4 = peg$c45;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c46); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseSPACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseFilter();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s2;
              s3 = peg$c47(s6);
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          s2 = peg$currPos;
          s3 = peg$parseSPACE();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c45) {
              s4 = peg$c45;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c46); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSPACE();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseFilter();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s2;
                  s3 = peg$c47(s6);
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c48(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseFilter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      s2 = peg$parseFilterName();
      if (s2 !== peg$FAILED) {
        s1 = input.substring(s1, peg$currPos);
      } else {
        s1 = s2;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseFilterArgs();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c49(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFilterName() {
      var s0, s1;

      s0 = [];
      s1 = peg$parseID_CHAR();
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parseID_CHAR();
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseFilterArgs() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parseLPAR();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseSPACE();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseExpr();
          if (s3 !== peg$FAILED) {
            s4 = [];
            s5 = peg$currPos;
            s6 = peg$parseSPACE();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseCOMMA();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseSPACE();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parseExpr();
                  if (s9 !== peg$FAILED) {
                    peg$savedPos = s5;
                    s6 = peg$c50(s3, s9);
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$currPos;
              s6 = peg$parseSPACE();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseCOMMA();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseSPACE();
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseExpr();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s5;
                      s6 = peg$c50(s3, s9);
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseSPACE();
              if (s5 !== peg$FAILED) {
                s6 = peg$parseRPAR();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c51(s3, s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseLiteral() {
      var s0;

      s0 = peg$parseNumberLiteral();
      if (s0 === peg$FAILED) {
        s0 = peg$parseArrayLiteral();
        if (s0 === peg$FAILED) {
          s0 = peg$parseStringLiteral();
          if (s0 === peg$FAILED) {
            s0 = peg$parseBoolLiteral();
            if (s0 === peg$FAILED) {
              s0 = peg$parseNullLiteral();
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNumberLiteral() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 43) {
        s1 = peg$c52;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s1 = peg$c54;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c55); }
        }
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (peg$c31.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (peg$c31.test(input.charAt(peg$currPos))) {
              s3 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parseDOT();
          if (s4 !== peg$FAILED) {
            s5 = [];
            if (peg$c31.test(input.charAt(peg$currPos))) {
              s6 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
            if (s6 !== peg$FAILED) {
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                if (peg$c31.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c32); }
                }
              }
            } else {
              s5 = peg$FAILED;
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c56(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseArrayLiteral() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseLSB();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseExpr();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$currPos;
          s5 = peg$parseSPACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseCOMMA();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseSPACE();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseExpr();
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s4;
                  s5 = peg$c50(s2, s8);
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            s4 = peg$currPos;
            s5 = peg$parseSPACE();
            if (s5 !== peg$FAILED) {
              s6 = peg$parseCOMMA();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseSPACE();
                if (s7 !== peg$FAILED) {
                  s8 = peg$parseExpr();
                  if (s8 !== peg$FAILED) {
                    peg$savedPos = s4;
                    s5 = peg$c50(s2, s8);
                    s4 = s5;
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseRSB();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c57(s2, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseBoolLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c58) {
        s1 = peg$c58;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c59); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseID_CHAR();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c60();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c61) {
          s1 = peg$c61;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c62); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          s3 = peg$parseID_CHAR();
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c63();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseNullLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c64) {
        s1 = peg$c64;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c65); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$parseID_CHAR();
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c66();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseStringLiteral() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 34) {
        s1 = peg$c67;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseDoubleStringCharacter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDoubleStringCharacter();
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 34) {
            s3 = peg$c67;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c68); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c69(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
          s1 = peg$c70;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c71); }
        }
        if (s1 !== peg$FAILED) {
          s2 = [];
          s3 = peg$parseSingleStringCharacter();
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseSingleStringCharacter();
          }
          if (s2 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 39) {
              s3 = peg$c70;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c71); }
            }
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c69(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseDoubleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 34) {
        s2 = peg$c67;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c68); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c72;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c74(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseSingleStringCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      if (input.charCodeAt(peg$currPos) === 39) {
        s2 = peg$c70;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 92) {
          s1 = peg$c72;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parseEscapeSequence();
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c74(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      }

      return s0;
    }

    function peg$parseEscapeSequence() {
      var s0, s1, s2, s3;

      s0 = peg$parseCharacterEscapeSequence();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 48) {
          s1 = peg$c75;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c76); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$currPos;
          peg$silentFails++;
          if (peg$c31.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          peg$silentFails--;
          if (s3 === peg$FAILED) {
            s2 = void 0;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
          if (s2 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c77();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$parseHexEscapeSequence();
          if (s0 === peg$FAILED) {
            s0 = peg$parseUnicodeEscapeSequence();
          }
        }
      }

      return s0;
    }

    function peg$parseCharacterEscapeSequence() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseNonEscapeCharacter();
      }

      return s0;
    }

    function peg$parseSingleEscapeCharacter() {
      var s0, s1;

      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c70;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c71); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 34) {
          s0 = peg$c67;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c68); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 92) {
            s0 = peg$c72;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c73); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 98) {
              s1 = peg$c78;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c79); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c80();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 102) {
                s1 = peg$c81;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c82); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c83();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 110) {
                  s1 = peg$c84;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c85); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c86();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 114) {
                    s1 = peg$c87;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c88); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c89();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 116) {
                      s1 = peg$c90;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c91); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$c92();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 118) {
                        s1 = peg$c93;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c94); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c95();
                      }
                      s0 = s1;
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseNonEscapeCharacter() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$currPos;
      peg$silentFails++;
      s2 = peg$parseEscapeCharacter();
      peg$silentFails--;
      if (s2 === peg$FAILED) {
        s1 = void 0;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        if (input.length > peg$currPos) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c0); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c34();
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseEscapeCharacter() {
      var s0;

      s0 = peg$parseSingleEscapeCharacter();
      if (s0 === peg$FAILED) {
        if (peg$c31.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c32); }
        }
        if (s0 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 120) {
            s0 = peg$c96;
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c97); }
          }
          if (s0 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 117) {
              s0 = peg$c98;
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c99); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseHexEscapeSequence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 120) {
        s1 = peg$c96;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c97); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c100(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseHexDigit() {
      var s0;

      if (peg$c101.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c102); }
      }

      return s0;
    }

    function peg$parseUnicodeEscapeSequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 117) {
        s1 = peg$c98;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c99); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$currPos;
        s4 = peg$parseHexDigit();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseHexDigit();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseHexDigit();
            if (s6 !== peg$FAILED) {
              s7 = peg$parseHexDigit();
              if (s7 !== peg$FAILED) {
                s4 = [s4, s5, s6, s7];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          s2 = input.substring(s2, peg$currPos);
        } else {
          s2 = s3;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c100(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsePIPE() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 124) {
        s0 = peg$c16;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }

      return s0;
    }

    function peg$parsePLUS() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 43) {
        s0 = peg$c52;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c53); }
      }

      return s0;
    }

    function peg$parseMINUS() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c54;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c55); }
      }

      return s0;
    }

    function peg$parseMUL() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 42) {
        s0 = peg$c39;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c40); }
      }

      return s0;
    }

    function peg$parseDIV() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 47) {
        s0 = peg$c103;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c104); }
      }

      return s0;
    }

    function peg$parseMOD() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 37) {
        s0 = peg$c105;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c106); }
      }

      return s0;
    }

    function peg$parseCOMMA() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c107;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c108); }
      }

      return s0;
    }

    function peg$parseDOT() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 46) {
        s0 = peg$c109;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c110); }
      }

      return s0;
    }

    function peg$parseSPACE() {
      var s0, s1;

      s0 = [];
      if (input.charCodeAt(peg$currPos) === 32) {
        s1 = peg$c111;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c112); }
      }
      if (s1 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 9) {
          s1 = peg$c113;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c114); }
        }
      }
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (input.charCodeAt(peg$currPos) === 32) {
          s1 = peg$c111;
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c112); }
        }
        if (s1 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 9) {
            s1 = peg$c113;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c114); }
          }
        }
      }

      return s0;
    }

    function peg$parseNON_DIGIT_CHAR() {
      var s0;

      if (peg$c115.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c117.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s0 === peg$FAILED) {
          if (peg$c119.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c120); }
          }
        }
      }

      return s0;
    }

    function peg$parseID_CHAR() {
      var s0;

      if (peg$c115.test(input.charAt(peg$currPos))) {
        s0 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c116); }
      }
      if (s0 === peg$FAILED) {
        if (peg$c117.test(input.charAt(peg$currPos))) {
          s0 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c118); }
        }
        if (s0 === peg$FAILED) {
          if (peg$c31.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c32); }
          }
          if (s0 === peg$FAILED) {
            if (peg$c119.test(input.charAt(peg$currPos))) {
              s0 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c120); }
            }
          }
        }
      }

      return s0;
    }

    function peg$parseLPAR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 40) {
        s0 = peg$c121;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c122); }
      }

      return s0;
    }

    function peg$parseRPAR() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 41) {
        s0 = peg$c123;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c124); }
      }

      return s0;
    }

    function peg$parseLSB() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 91) {
        s0 = peg$c125;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }

      return s0;
    }

    function peg$parseRSB() {
      var s0;

      if (input.charCodeAt(peg$currPos) === 93) {
        s0 = peg$c127;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c128); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();
// Generated by CoffeeScript 1.10.0
var EVAL_TABLE, PathAccumulator, evalAst, evalExpression, evalPath, evalUnaryMinus, evalUnion, flatten, flattenRecur, isDeepWildcard, isPathExpression, isPredicate, isWildcard, mkEvalOp, resolveDeepWildcard, resolvePath, setToArray, toSet;

toSet = function(v, stringify) {
  if (Array.isArray(v)) {
    return new Set(v.map(function(x) {
      if (stringify) {
        return x;
      } else {
        return JSON.stringify(x);
      }
    }));
  } else {
    return new Set([stringify ? v : JSON.stringify(v)]);
  }
};

setToArray = function(s) {
  var r;
  r = [];
  s.forEach(function(v) {
    return r.push(v);
  });
  return r;
};

mkEvalOp = function(opFn) {
  return function(ast, scope) {
    var j, len, op, operand, operands, result;
    op = ast[0];
    if (ast.length < 3) {
      throw new Error("Insufficient operands for '" + op + "' operator: " + (JSON.stringify(ast)));
    }
    operands = ast.slice(2);
    result = evalAst(ast[1], scope);
    for (j = 0, len = operands.length; j < len; j++) {
      operand = operands[j];
      result = opFn(result, evalAst(operand, scope));
    }
    return result;
  };
};

evalUnion = function(ast, scope) {
  var j, len, operand, operands, otherSet, result;
  if (typeof Set !== "function") {
    return ["Sets are not supported in this JS runtime (TODO: fallback implementation)"];
  }
  if (ast.length < 3) {
    throw new Error("Insufficient operands for '|' operator: " + (JSON.stringify(ast)));
  }
  operands = ast.slice(2);
  result = toSet(evalAst(ast[1], scope), true);
  for (j = 0, len = operands.length; j < len; j++) {
    operand = operands[j];
    otherSet = toSet(evalAst(operand, scope), true);
    result = toSet(setToArray(result).concat(setToArray(otherSet)), false);
  }
  return setToArray(result).map(JSON.parse);
};

evalUnaryMinus = function(ast, scope) {
  var op, operands;
  op = ast[0];
  if (ast.length !== 2) {
    throw new Error("Wrong number of operands for '" + op + "' operator: " + (JSON.stringify(ast)));
  }
  operands = ast.slice(2);
  return -(evalAst(ast[1], scope));
};

flattenRecur = function(arr) {
  return arr.reduce(function(acc, i) {
    return acc.concat(Array.isArray(i) ? flatten(i) : i);
  }, []);
};

flatten = function(arr) {
  return arr.reduce((function(acc, i) {
    return acc.concat(i);
  }), []);
};

isWildcard = function(c) {
  return Array.isArray(c) && c.length === 1 && c[0] === 'wildcard';
};

isDeepWildcard = function(c) {
  return Array.isArray(c) && c.length === 1 && c[0] === 'deepWildcard';
};

isPredicate = function(c) {
  return Array.isArray(c) && c[0] === 'pred';
};

isPathExpression = function(c) {
  return Array.isArray(c) && c[0] === 'expr';
};

resolveDeepWildcard = function(scope, path, acc) {
  var item, j, k, len, results, results1, v;
  if (Array.isArray(scope)) {
    results = [];
    for (j = 0, len = scope.length; j < len; j++) {
      item = scope[j];
      resolvePath(item, path, acc);
      results.push(resolveDeepWildcard(item, path, acc));
    }
    return results;
  } else if (typeof scope === 'object') {
    results1 = [];
    for (k in scope) {
      v = scope[k];
      resolvePath(v, path, acc);
      results1.push(resolveDeepWildcard(v, path, acc));
    }
    return results1;
  }
};

resolvePath = function(scope, path, acc) {
  var exprResult, item, j, k, l, len, len1, pathHead, pathTail, results, results1, results2, results3, v;
  pathHead = path[0];
  pathTail = path.slice(1);
  if (pathHead === null || pathHead === void 0) {
    acc.putValue(scope);
    return;
  }
  if (scope === null || scope === void 0) {
    acc.putValue(null);
  } else {
    if (isWildcard(pathHead)) {
      acc.makeMultiple();
      if (Array.isArray(scope)) {
        results = [];
        for (j = 0, len = scope.length; j < len; j++) {
          item = scope[j];
          results.push(resolvePath(item, pathTail, acc));
        }
        return results;
      } else if (typeof scope === "object") {
        results1 = [];
        for (k in scope) {
          v = scope[k];
          results1.push(resolvePath(v, pathTail, acc));
        }
        return results1;
      } else {
        acc.putValue(null);
      }
    } else if (isDeepWildcard(pathHead)) {
      acc.makeMultiple();
      resolveDeepWildcard(scope, pathTail, acc);
    } else if (isPredicate(pathHead)) {
      acc.makeMultiple();
      if (Array.isArray(scope)) {
        results2 = [];
        for (l = 0, len1 = scope.length; l < len1; l++) {
          item = scope[l];
          if (evalAst(pathHead[1], item)) {
            results2.push(resolvePath(item, pathTail, acc));
          } else {
            results2.push(void 0);
          }
        }
        return results2;
      } else if (typeof scope === "object") {
        results3 = [];
        for (k in scope) {
          v = scope[k];
          if (evalAst(pathHead[1], v)) {
            results3.push(resolvePath(v, pathTail, acc));
          } else {
            results3.push(void 0);
          }
        }
        return results3;
      } else {
        acc.putValue(null);
      }
    } else if (isPathExpression(pathHead)) {
      exprResult = evalAst(pathHead[1], scope);
      return resolvePath(exprResult, pathTail, acc);
    } else {
      if (Array.isArray(scope) && !Number.isInteger(pathHead)) {
        acc.putValue(null);
      } else {
        return resolvePath(scope[pathHead], pathTail, acc);
      }
    }
  }
};

PathAccumulator = (function() {
  function PathAccumulator() {
    this.result = null;
    this.isMultiple = false;
  }

  PathAccumulator.prototype.makeMultiple = function() {
    if (!this.isMultiple) {
      this.isMultiple = true;
      return this.result = [];
    }
  };

  PathAccumulator.prototype.putValue = function(v) {
    if (this.isMultiple) {
      if (v !== null && v !== void 0) {
        return this.result.push(v);
      }
    } else {
      return this.result = v;
    }
  };

  return PathAccumulator;

})();

evalPath = function(ast, scope) {
  var acc, components;
  components = ast.slice(1);
  acc = new PathAccumulator;
  resolvePath(scope, components, acc);
  return acc.result;
};

EVAL_TABLE = {
  "+": mkEvalOp(function(a, b) {
    return a + b;
  }),
  "|": evalUnion,
  "-": mkEvalOp(function(a, b) {
    return a - b;
  }),
  "*": mkEvalOp(function(a, b) {
    return a * b;
  }),
  "/": mkEvalOp(function(a, b) {
    return a / b;
  }),
  "=": mkEvalOp(function(a, b) {
    return a === b;
  }),
  "!=": mkEvalOp(function(a, b) {
    return a !== b;
  }),
  ">": mkEvalOp(function(a, b) {
    return a > b;
  }),
  "<": mkEvalOp(function(a, b) {
    return a < b;
  }),
  ">=": mkEvalOp(function(a, b) {
    return a >= b;
  }),
  "<=": mkEvalOp(function(a, b) {
    return a <= b;
  }),
  "unary-": evalUnaryMinus,
  "path": evalPath
};

evalExpression = function(expr, scope) {
  var ast;
  ast = parser.parse(expr);
  return evalAst(ast, scope);
};

evalAst = function(ast, scope) {
  var evalFn;
  if (Array.isArray(ast)) {
    evalFn = EVAL_TABLE[ast[0]];
    if (!evalFn) {
      throw new Error("Don't know how to evaluate " + ast[0] + ": " + (JSON.stringify(ast)));
    }
    return evalFn(ast, scope);
  } else {
    return ast;
  }
};
// Generated by CoffeeScript 1.10.0
var DEFAULT_DIRECTIVES, evalFilter, evalIf, evalJs, evalLet, evalMap, evalSwitch;

evalLet = function(jute, node, scope, options) {
  var addVarToScope, body, childScope, i, k, len, ref, ref1, v, varDecl, varName;
  childScope = jute.makeChildScope(scope);
  addVarToScope = function(name, node) {
    return childScope[name] = jute.evalNode(node, childScope, options);
  };
  if (Array.isArray(node.$let)) {
    ref = node.$let;
    for (i = 0, len = ref.length; i < len; i++) {
      varDecl = ref[i];
      varName = firstKeyName(varDecl);
      if (varName) {
        addVarToScope(varName, varDecl[varName]);
      }
    }
  } else {
    ref1 = node.$let;
    for (k in ref1) {
      v = ref1[k];
      addVarToScope(k, v);
    }
  }
  body = node.$body;
  if (typeof body === 'undefined') {
    throw "No $body attr in $let node: " + JSON.stringify(node);
  }
  return jute.evalNode(body, childScope, options);
};

evalIf = function(jute, node, scope, options) {
  var evalResult, v;
  evalResult = jute.evalExpression(node.$if, scope, options);
  if (evalResult) {
    v = nodeValue(node, '$then');
    return jute.evalNode(v, scope, options);
  } else {
    return jute.evalNode(node.$else || null, scope, options);
  }
};

evalSwitch = function(jute, node, scope, options) {
  var evalResult, resultNode;
  evalResult = jute.evalExpression(node.$switch, scope, options);
  resultNode = node[evalResult];
  if (typeof resultNode === 'undefined') {
    resultNode = node['$default'];
  }
  if (typeof resultNode === 'undefined') {
    return null;
  } else {
    return jute.evalNode(resultNode, scope, options);
  }
};

evalFilter = function(jute, node, scope, options) {
  var applyFilter, f, filters, i, len, result, val;
  filters = node.$filter;
  val = jute.evalNode(nodeValue(node, '$body'), scope, options);
  applyFilter = function(filterName, val) {
    var filterArgs, filterFn;
    if (filterName.indexOf('(') > 0) {
      filterArgs = filterName.match(/\(([^)]+)\)$/)[1].split(",").map(JSON.parse);
      filterName = filterName.substr(0, filterName.indexOf("("));
    } else {
      filterArgs = [];
    }
    filterFn = HELPERS[filterName];
    if (!filterFn) {
      throw "Unknown filter: '" + filterName + "'";
    }
    return filterFn.apply(scope, [val].concat(filterArgs));
  };
  if (Array.isArray(filters)) {
    result = val;
    for (i = 0, len = filters.length; i < len; i++) {
      f = filters[i];
      result = applyFilter(f, result);
    }
    return result;
  } else {
    return applyFilter(filters, val);
  }
};

evalJs = function(jute, node, scope, options) {
  return eval(node.$js);
};

evalMap = function(jute, node, scope, options) {
  var array, childScope, result, value, varName;
  array = jute.evalExpression(node.$map, scope, options);
  if (!Array.isArray(array)) {
    array = [array];
  }
  varName = node.$as;
  value = nodeValue(node, '$body', options);
  result = [];
  childScope = jute.makeChildScope(scope);
  array.forEach(function(item) {
    childScope[varName] = item;
    return result.push(jute.evalNode(value, childScope, options));
  });
  return result;
};

DEFAULT_DIRECTIVES = {
  $if: evalIf,
  $switch: evalSwitch,
  $let: evalLet,
  $filter: evalFilter,
  $map: evalMap,
  $js: evalJs
};
// Generated by CoffeeScript 1.10.0
var HELPERS, evalDirective, evalNode, evalObject, evalString, exports, isDirective, jute, makeChildScope, nodeValue, transform;

HELPERS = {
  join: function(s, sep) {
    return s.join(sep);
  },
  toUpperCase: function(s) {
    return String(s).toUpperCase();
  },
  toLowerCase: function(s) {
    return String(s).toLowerCase();
  }
};

makeChildScope = function(scope) {
  var childScope;
  childScope = {};
  childScope.__proto__ = scope;
  return childScope;
};

nodeValue = function(node, valueAttr) {
  var key, value, valueObject;
  valueObject = node[valueAttr || '$value'];
  if (typeof valueObject !== 'undefined') {
    return valueObject;
  } else {
    valueObject = {};
    for (key in node) {
      value = node[key];
      if (!key.match(/^\$/)) {
        valueObject[key] = value;
      }
    }
    return valueObject;
  }
};

isDirective = function(node, options) {
  var key, value;
  for (key in node) {
    value = node[key];
    if (key.match(/^\$/)) {
      return true;
    }
  }
  return false;
};

evalDirective = function(node, scope, options) {
  var directiveFn, directiveName, keys, knownDirectives, nodeKeys;
  knownDirectives = Object.keys(options.directives);
  nodeKeys = Object.keys(node);
  keys = intersectArrays(nodeKeys, knownDirectives);
  if (keys.length === 0) {
    throw "Could not find known directive among " + (nodeKeys.join(', ')) + "; Known directives are: " + (knownDirectives.join(', '));
  } else if (keys.length > 1) {
    throw "Ambigous node with multiple directives found: " + (keys.join(', '));
  }
  directiveName = keys[0];
  directiveFn = options.directives[directiveName];
  return directiveFn(jute, node, scope, options);
};

evalObject = function(node, scope, options) {
  var key, result, value;
  if (isDirective(node, options)) {
    return evalDirective(node, scope, options);
  } else {
    result = {};
    for (key in node) {
      value = node[key];
      result[key] = jute.evalNode(value, scope, options);
    }
    return result;
  }
};

evalString = function(node, scope, options) {
  var expressionStartRegexp;
  expressionStartRegexp = /^\s*\$\s+/;
  if (node.match(expressionStartRegexp)) {
    return jute.evalExpression(node.replace(expressionStartRegexp, ''), scope);
  } else {
    return node;
  }
};

evalNode = function(node, scope, options) {
  var nodeType;
  if (typeof options === 'undefined' || !options) {
    throw "evalNode() called without options. Node is: " + (JSON.stringify(node));
  }
  if (typeof scope === 'undefined') {
    throw "evalNode() called with undefined scope. Node is: " + (JSON.stringify(node));
  }
  nodeType = typeof node;
  if (nodeType === 'object' && node !== null) {
    if (Array.isArray(node)) {
      return node.map(function(element) {
        return jute.evalNode(element, scope, options);
      });
    } else {
      return evalObject(node, scope, options);
    }
  } else {
    if (nodeType === 'string') {
      return evalString(node, scope, options);
    } else if (nodeType === 'undefined') {
      return null;
    } else {
      return node;
    }
  }
};

jute = {
  evalExpression: evalExpression,
  evalNode: evalNode,
  makeChildScope: makeChildScope
};

transform = function(scope, template, options) {
  if (options == null) {
    options = {
      directives: {}
    };
  }
  extend(options.directives, DEFAULT_DIRECTIVES);
  return jute.evalNode(template, scope, options);
};

exports = {
  transform: transform,
  parser: parser,
  jute: jute
};

if (typeof module !== 'undefined') {
  module.exports = exports;
} else if (typeof window !== 'undefined') {
  window.jute = exports;
} else {
  this.jute = exports;
}
}).call(this);
