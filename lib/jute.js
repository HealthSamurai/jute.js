// Generated by CoffeeScript 1.10.0
(function() {
  var evalExpression, evalNode, getIn, parsePath, transform;

  parsePath = function(p) {
    return p.split('.').map(function(e) {
      return e.trim();
    });
  };

  getIn = function(obj, path) {
    var result;
    result = obj;
    path.forEach(function(x) {
      var getFirst;
      if (!(result === null || result === void 0)) {
        getFirst = false;
        if (x[x.length - 1] === '~') {
          x = x.substr(0, x.length - 1);
          getFirst = true;
        }
        result = result[x];
        if (getFirst && Array.isArray(result)) {
          return result = result[1];
        }
      }
    });
    return result;
  };

  evalExpression = function(expr, scope) {
    var args, e, filter, filterFn, filterRegexp, filters, i, len, name, pathRegexp, result;
    pathRegexp = /"(?:[^"\\]|\\.)*"|([a-zA-Z_0-9~][a-zA-Z_0-9.~]+[a-zA-Z_0-9~])/g;
    filterRegexp = /(\s*\|\s*[a-zA-Z0-9_]+(\([^)]+\))?)*\s*$/;
    filters = null;
    e = String(expr.substr(1)).replace(filterRegexp, function(f_str) {
      filters = f_str.split(/\s*\|\s*/).map(function(f) {
        var args;
        f = f.trim();
        if (f.indexOf("(") > 0) {
          args = f.match(/\(([^)]+)\)$/)[1].split(",").map(JSON.parse);
          f = f.substr(0, f.indexOf("("));
          return [f, args];
        } else {
          return f;
        }
      });
      filters.shift();
      return "";
    });
    e = e.replace(pathRegexp, function(fullMatch, pathStr) {
      var path;
      if (pathStr) {
        path = parsePath(pathStr);
        return "getIn(scope, " + (JSON.stringify(path)) + ")";
      } else {
        return fullMatch;
      }
    });
    result = eval(e);
    for (i = 0, len = filters.length; i < len; i++) {
      filter = filters[i];
      if (Array.isArray(filter)) {
        name = filter.shift();
        args = filter;
      } else {
        name = filter;
        args = [];
      }
      filterFn = HELPERS[name];
      if (!filterFn) {
        throw "Unknown filter: '" + name + "'";
      }
      result = filterFn.apply(scope, [result].concat(args));
    }
    return result;
  };

  evalNode = function(node, scope) {
    var key, result, value;
    if (typeof node === 'object' && node !== null) {
      if (Array.isArray(node)) {
        return node.map(function(element) {
          return evalNode(element, scope);
        });
      } else {
        result = {};
        for (key in node) {
          value = node[key];
          result[key] = evalNode(value, scope);
        }
        return result;
      }
    } else {
      if (typeof node === 'string' && node[0] === '$') {
        return evalExpression(node, scope);
      } else {
        return node;
      }
    }
  };

  transform = function(scope, template) {
    return evalNode(template, scope);
  };

  module.exports = {
    transform: transform
  };

}).call(this);
